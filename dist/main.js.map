{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/scripts/input.js","webpack:///./src/scripts/game.js","webpack:///./src/scripts/board.js","webpack:///./src/scripts/wall.js","webpack:///./src/scripts/walls.js","webpack:///./src/scripts/marble.js","webpack:///./src/scripts/hole.js","webpack:///./src/scripts/holes.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","InputHandler","marble","this","keys","window","addEventListener","e","preventDefault","keyCode","type","deltaTime","tiltUp","tiltDown","tiltLeft","tiltRight","Game","board","walls","holes","update","accX","accY","ctx","fillStyle","font","fillText","tiltX","tiltY","velX","velY","strokeStyle","beginPath","rect","stroke","drawStartFinish","draw","forEach","wall","hole","drawHUD","Board","width","height","moveTo","lineTo","Wall","id","startXCell","startYCell","orientation","length","cellSize","wallRadius","modStart","modEnd","radius","topLeft","topRight","bottomLeft","bottomRight","wallWidth","wallHeight","center","calculateDimensions","calculateCenter","x","y","fillRect","arc","Math","PI","fill","Marble","maxTiltX","maxTiltY","startPosX","startPosY","posX","posY","grav","fricSCoeff","fricKCoeff","tiltMultiplier","bounciness","stopX","stopY","halfOfLongestWallLength","distRadius","sqrt","pow","collision","distanceMin","shiftX","shiftY","fell","a","b","rad","cos","vel","deg","axis","dirFric","dirAcc","sign","degToRad","abs","acc","sin","fric","accNet","x1","y1","x2","y2","wallsToCheck","calculateDistance","push","detectCollision","distance","opp","adj","theta","intX","intY","atan","quadForm","alert","restart","calculateAcc","prevVelX","prevVelY","checkWallCollisions","checkBorderCollisions","detectHole","checkFinish","Hole","posCellX","posCellY","grd","createRadialGradient","addColorStop","document","getElementById","getContext","CELL_SIZE","WALL_RADIUS","GAME_WIDTH","GAME_HEIGHT","MARBLE_RADIUS","inputHandler","game","lastTime","requestAnimationFrame","gameLoop","timestamp","handleInput","clearRect"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export default class InputHandler {\n  constructor(marble) {\n    this.marble = marble;\n    this.keys;\n\n    window.addEventListener(\"keydown\", e => {\n      e.preventDefault();\n      this.keys = (this.keys || []);\n      this.keys[e.keyCode] = (e.type == \"keydown\");\n    })\n\n    window.addEventListener(\"keyup\", e => {\n      e.preventDefault();\n      this.keys[e.keyCode] = (e.type == \"keydown\");\n    })\n  }\n\n  handleInput(deltaTime) {\n    if (this.keys && this.keys[87]) { this.marble.tiltUp(deltaTime); }\n    if (this.keys && this.keys[83]) { this.marble.tiltDown(deltaTime); }\n    if (this.keys && this.keys[65]) { this.marble.tiltLeft(deltaTime); }\n    if (this.keys && this.keys[68]) { this.marble.tiltRight(deltaTime); }\n  }\n}","export default class Game {\n  constructor(board, marble, walls, holes) {\n    debugger\n    this.board = board;\n    this.marble = marble;\n    this.walls = walls;\n    this.holes = holes;\n  }\n  \n  update(deltaTime) {\n    this.marble.update(deltaTime, this.board.accX, this.board.accY);\n  }\n\n  drawHUD(ctx) {\n    ctx.fillStyle = \"blue\";\n    ctx.font = \"16px Arial\";\n    ctx.fillText(`tiltX=${this.marble.tiltX}`, 20, 26);\n    ctx.fillText(`tiltY=${this.marble.tiltY}`, 420, 26)\n    ctx.fillText(`accX=${this.marble.accX}`, 20, 56);\n    ctx.fillText(`accY=${this.marble.accY}`, 420, 56)\n    ctx.fillText(`velX=${this.marble.velX}`, 20, 86);\n    ctx.fillText(`velY=${this.marble.velY}`, 420, 86)\n  }\n\n  drawStartFinish(ctx) {\n    ctx.fillStyle = \"red\";\n    ctx.fillText(\"START\", 36 * 17 - 22, 16 * 36);\n\n    ctx.fillStyle = \"green\";\n    ctx.fillText(\"FINISH\", 21 * 36 - 22, 17 * 36 + 8);\n    \n    ctx.strokeStyle = \"green\";\n    ctx.beginPath();\n    ctx.rect(20 * 36, 16 * 36, 2 * 36, 2 * 36);\n    ctx.stroke();\n  }\n\n  draw(ctx) {\n    this.drawStartFinish(ctx);\n\n    this.board.draw(ctx);\n    this.walls.forEach(wall => wall.draw(ctx));\n    this.holes.forEach(hole => hole.draw(ctx));\n    this.marble.draw(ctx);\n    this.drawHUD(ctx);\n  }\n}","export default class Board {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n  }\n\n  draw(ctx) {\n    ctx.strokeStyle = \"black\";\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    ctx.lineTo(this.width, 0);\n    ctx.lineTo(this.width, this.height);\n    ctx.lineTo(0, this.height);\n    ctx.lineTo(0, 0);\n    ctx.stroke();\n  }\n}","import { CELL_SIZE, WALL_RADIUS } from \"../index\"; // Why don't these imports work?\n\n// modStart > 0 => extend the starting portion of the wall\n// modStart < 0 => shorten the starting portion of the wall\n// modEnd > 0 => extend the ending portion of the wall\n// modEnd < 0 => shorten the ending portion of the wall\n\nexport default class Wall {\n  constructor(id, startXCell, startYCell, orientation, length, cellSize, wallRadius, modStart, modEnd) {\n    // debugger // FIXME\n    this.id = id;\n    this.startXCell = startXCell;\n    this.startYCell = startYCell;\n    this.orientation = orientation;\n    this.length = length;\n    this.cellSize = 36; // Game size multiplier\n    this.radius = 2; // Half of wall thickness\n    this.modStart = modStart;\n    this.modEnd = modEnd;\n\n\n    // Calculate dimensions\n    this.topLeft;\n    this.topRight;\n    this.bottomLeft;\n    this.bottomRight;\n    this.wallWidth;\n    this.wallHeight;\n    this.center;\n    this.calculateDimensions();\n    this.calculateCenter();\n\n    // debugger\n  }\n\n  calculateCenter() {\n    // debugger\n    this.center = {\n      x: (this.topRight.x + this.topLeft.x) / 2,\n      y: (this.topLeft.y + this.bottomLeft.y) / 2\n    };\n    // debugger\n  }\n\n  calculateDimensions() {\n    // debugger\n    if (this.orientation === \"x\") {\n      this.topLeft = {\n        x: this.startXCell * this.cellSize,\n        y: this.startYCell * this.cellSize - this.radius\n      };\n      this.bottomLeft = {\n        x: this.startXCell * this.cellSize,\n        y: this.startYCell * this.cellSize + this.radius\n      };\n      \n      if (this.modStart < 0) {\n        this.topLeft.x += this.radius;\n        this.bottomLeft.x += this.radius;\n      } else if (this.modStart > 0) {\n        this.topLeft.x -= this.radius;\n        this.bottomLeft.x -= this.radius;\n      }\n\n      this.topRight = {\n        x: (this.startXCell + this.length) * this.cellSize,\n        y: this.startYCell * this.cellSize - this.radius\n      };\n      this.bottomRight = {\n        x: (this.startXCell + this.length) * this.cellSize,\n        y: this.startYCell * this.cellSize + this.radius\n      };\n\n      if (this.modEnd < 0) {\n        this.topRight.x -= this.radius;\n        this.bottomRight.x -= this.radius;\n      } else if (this.modEnd > 0) {\n        this.topRight.x += this.radius;\n        this.bottomRight.x += this.radius;\n      }\n\n    } else if (this.orientation === \"y\") {\n      this.topLeft = {\n        x: this.startXCell * this.cellSize - this.radius,\n        y: this.startYCell * this.cellSize\n      };\n      this.topRight = {\n        x: this.startXCell * this.cellSize + this.radius,\n        y: this.startYCell * this.cellSize\n      };\n\n      if (this.modStart < 0) {\n        this.topLeft.y += this.radius;\n        this.topRight.y += this.radius;\n      } else if (this.modStart > 0) {\n        this.topLeft.y -= this.radius;\n        this.topRight.y -= this.radius;\n      }\n\n      this.bottomLeft = {\n        x: this.startXCell * this.cellSize - this.radius,\n        y: (this.startYCell + this.length) * this.cellSize \n      };\n      this.bottomRight = {\n        x: this.startXCell * this.cellSize + this.radius,\n        y: (this.startYCell + this.length) * this.cellSize\n      };\n\n      if (this.modEnd < 0) {\n        this.bottomLeft.y -= this.radius;\n        this.bottomRight.y -= this.radius;\n      } else if (this.modEnd > 0) {\n        this.bottomLeft.y += this.radius;\n        this.bottomRight.y += this.radius;\n      }\n    }\n\n    // Calculate wallWidth and wallHeight\n    this.wallWidth = this.topRight.x - this.topLeft.x;\n    this.wallHeight = this.bottomLeft.y - this.topLeft.y;\n    // debugger\n  }\n\n  draw(ctx) {\n    // debugger\n    // Draw id label\n    ctx.fillStyle = \"blue\";\n    ctx.font = \"12 px Arial\";\n    ctx.fillText(`${this.id}`, this.center.x, this.center.y);\n    // debugger\n    // Draw wall\n    ctx.fillStyle = \"black\";\n    ctx.fillRect(this.topLeft.x, this.topLeft.y, this.topRight.x - this.topLeft.x, this.bottomLeft.y - this.topLeft.y); // FIXME - Refactor to include wallWidth and wallHeight\n    // debugger\n    // Draw center\n    ctx.fillStyle = \"red\";\n    ctx.beginPath();\n    ctx.arc(this.center.x, this.center.y, 2, 0, 2 * Math.PI);\n    ctx.fill(); \n  }\n}","import Wall from \"./wall\";\nimport { CELL_SIZE, WALL_RADIUS } from \"../index\"; // Why don't these imports work?\n\n// debugger // FIXME\nconst walls = [\n  new Wall(1, 18, 0, \"y\", 2, 36, 2, 0, 1), // 1\n  new Wall(2, 0, 2, \"x\", 2, 36, 2, 0, 0), // 2\n  new Wall(3, 10, 2, \"x\", 2, 36, 2, 0, 0), // 3\n  new Wall(4, 16, 2, \"x\", 2, 36, 2, 0, -1), // 4\n  new Wall(5, 6, 2, \"y\", 4, 36, 2, 0, -1), // 5\n  new Wall(6, 8, 2, \"y\", 2, 36, 2, 0, 0), // 6\n  new Wall(7, 20, 2, \"y\", 2, 36, 2, 0, 1), // 7\n  new Wall(8, 2, 4, \"x\", 2, 36, 2, 1, 0), // 8\n  new Wall(9, 10, 4, \"x\", 2, 36, 2, 0, 0), // 9\n  new Wall(10, 16, 4, \"x\", 4, 36, 2, 0, -1), // 10\n  new Wall(11, 2, 4, \"y\", 2, 36, 2, -1, 0), // 11\n  new Wall(12, 14, 4, \"y\", 2, 36, 2, 0, -1), // 12\n  new Wall(13, 4, 6, \"x\", 6, 36, 2, 0, 0), // 13\n  new Wall(14, 12, 6, \"x\", 4, 36, 2, 1, 1), // 14\n  new Wall(15, 20, 6, \"x\", 2, 36, 2, 0, 0), // 15\n  new Wall(16, 12, 6, \"y\", 2, 36, 2, -1, -1), // 16\n  new Wall(17, 16, 6, \"y\", 8, 36, 2, -1, -1), // 17\n  new Wall(18, 18, 6, \"y\", 2, 36, 2, 0, 0), // 18\n  new Wall(19, 0, 8, \"x\", 4, 36, 2, 0, 0), // 19\n  new Wall(20, 10, 8, \"x\", 4, 36, 2, 0, 0), // 20\n  new Wall(21, 6, 8, \"y\", 4, 36, 2, 0, -1), // 21\n  new Wall(22, 8, 8, \"y\", 2, 36, 2, 0, 0), // 22\n  new Wall(23, 20, 8, \"y\", 2, 36, 2, 0, 1), // 23\n  new Wall(24, 2, 10, \"x\", 2, 36, 2, 0, 0), // 24\n  new Wall(25, 16, 10, \"x\", 4, 36, 2, -1, -1), // 25\n  new Wall(26, 4, 12, \"x\", 4, 36, 2, 1, 1), // 26\n  new Wall(27, 12, 12, \"x\", 2, 36, 2, 1, 0), // 27\n  new Wall(28, 18, 12, \"x\", 2, 36, 2, 0, 1), // 28\n  new Wall(29, 2, 12, \"y\", 2, 36, 2, 0, 0), // 29\n  new Wall(30, 4, 12, \"y\", 4, 36, 2, -1, 1), // 30\n  new Wall(31, 8, 12, \"y\", 4, 36, 2, -1, 1), // 31\n  new Wall(32, 10, 12, \"y\", 2, 36, 2, 0, 0), // 32\n  new Wall(33, 12, 12, \"y\", 2, 36, 2, -1, 0), // 33\n  new Wall(34, 20, 12, \"y\", 2, 36, 2, -1, 1), // 34\n  new Wall(35, 14, 14, \"x\", 4, 36, 2, 0, 1), // 35\n  new Wall(36, 20, 14, \"x\", 2, 36, 2, -1, 0), // 36\n  new Wall(37, 6, 14, \"y\", 4, 36, 2, 0, 0), // 37\n  new Wall(38, 18, 14, \"y\", 4, 36, 2, -1, 0), // 38\n  new Wall(39, 2, 16, \"x\", 2, 36, 2, 0, -1), // 39\n  new Wall(40, 8, 16, \"x\", 8, 36, 2, -1, 0), // 40\n];\n\nexport default walls;","import walls from \"./walls\";\n\nexport default class Marble {\n  constructor(radius, width, height, walls, holes) {\n    this.radius = radius;\n    this.width = width;\n    this.height = height;\n    this.walls = walls;\n    this.holes = holes;\n\n    this.cellSize = 36; // Game size adjustment\n    \n    this.maxTiltX = 45;\n    this.maxTiltY = 45;\n    this.startPosX = this.cellSize * 19;\n    this.startPosY = this.cellSize * 17;\n\n\n    this.tiltX = 0;\n    this.tiltY = 0;\n    this.accX = 0;\n    this.accY = 0;\n    this.velX = 0;\n    this.velY = 0;\n    this.posX = this.cellSize * 11;\n    this.posY = this.cellSize * 10;\n    \n    this.grav = 0.0025; // Adjust\n    this.fricSCoeff = 0.05; // Adjust\n    this.fricKCoeff = 0.05; // Adjust\n    this.tiltMultiplier = 0.03; // Adjust\n    this.bounciness = 0.1; // Adjust\n    this.stopX = false;\n    this.stopY = false;\n\n    this.wallRadius = 2;\n    this.halfOfLongestWallLength = 4;\n\n    // The farthest a marble's center can be from a wall's center and still possibly collide (assuming longest wall is 8 cells long)\n    this.distRadius = Math.sqrt(Math.pow(this.wallRadius, 2) + Math.pow(this.halfOfLongestWallLength * this.cellSize + this.wallRadius, 2)) + this.radius;\n    \n    this.collision = null;\n    this.distanceMin = this.radius;\n    this.shiftX = 0;\n    this.shiftY = 0;\n    this.fell = false;\n    // debugger;\n  }\n\n  restart() {\n    this.tiltX = 0;\n    this.tiltY = 0;\n    this.accX = 0;\n    this.accY = 0;\n    this.velX = 0;\n    this.velY = 0;\n\n    // FIXME to match this.startPosX and this.startPosY\n    this.posX = this.cellSize * 11;\n    this.posY = this.cellSize * 10;\n  }\n\n  draw(ctx) {\n    ctx.fillStyle = \"orange\";\n    ctx.beginPath();\n    ctx.arc(this.posX, this.posY, this.radius, 0, 2 * Math.PI);\n    ctx.fill();\n\n    ctx.beginPath();\n    // debugger\n    ctx.arc(this.posX, this.posY, this.distRadius, 0, 2 * Math.PI);\n    ctx.stroke();\n\n  }\n\n  quadForm(a, b, c) {\n    // debugger\n    let soln1 = null;\n    let soln2 = null;\n\n    soln1 = (-b - Math.sqrt( b*b - 4 * a * c )) / (2 * a);\n    soln2 = (-b + Math.sqrt( b*b - 4 * a * c )) / (2 * a);\n    // debugger\n    return [soln1, soln2];\n  }\n\n  calculateFricS(rad) {\n    return this.fricSCoeff * this.grav * Math.cos(rad);\n  }\n\n  calculateFricK(rad, vel) {\n    return this.fricKCoeff * this.grav * Math.cos(rad);\n  }\n\n  degToRad(deg) {\n    return deg * (Math.PI / 180);\n  }\n\n  calculateAcc(deg, vel, axis) {\n    // console.log(\"calculating acceleration!\");\n    let dirAcc = Math.sign(deg);\n    let dirFric;\n    if (vel === 0) { // Is this correct?\n      dirFric = -1 * dirAcc;\n    } else {\n      dirFric = -1 * Math.sign(vel);\n    }\n\n    let rad = this.degToRad(Math.abs(deg));\n\n    let acc = dirAcc * this.grav * Math.sin(rad);\n    let fric = dirFric * this.fricKCoeff * this.grav * Math.cos(rad);\n    let accNet = acc + fric;\n\n    if (Math.abs(acc) <= Math.abs(fric) && Math.sign(accNet) !== Math.sign(vel)) {\n      if (axis === \"x\") this.stopX = true;\n      if (axis === \"y\") this.stopY = true;\n    } else {\n      if (axis === \"x\") this.stopX = false;\n      if (axis === \"y\") this.stopY = false;\n    }\n\n    return accNet;\n  }\n\n  calculateDistance(x1, y1, x2, y2) {\n    // debugger\n    const dist = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n    // debugger\n    return dist;\n  }\n\n  checkBorderCollisions() {\n    if (this.posX - this.radius < 0) {\n      this.collision = \"right\";\n      this.shiftX = 2 * (0 - (this.posX - this.radius));\n    } else if (this.posX + this.radius > this.width) {\n      this.collision = \"left\";\n      this.shiftX = -2 * ((this.posX + this.radius) - this.width);\n    }\n\n    if (this.posY - this.radius < 0) {\n      this.collision = \"bottom\";\n      this.shiftY = 2 * (0 - (this.posY - this.radius));\n    } else if (this.posY + this.radius > this.height) {\n      this.collision = \"top\";\n      this.shiftY = -2 * ((this.posY + this.radius) - this.height);\n    }\n  }\n\n  // Iterate through walls and check for collision\n  checkWallCollisions() {\n    // debugger\n\n    const wallsToCheck = [];\n\n    this.walls.forEach(wall => {\n      // debugger\n\n      if (this.calculateDistance(this.posX, this.posY, wall.center.x, wall.center.y) <= this.distRadius) {\n        // debugger\n        wallsToCheck.push(wall);\n      }\n    })\n\n    // debugger\n\n    wallsToCheck.forEach(wall => {\n      this.detectCollision(wall);\n    })\n  }\n\n  detectCollision(wall) {\n    let distance = null; // DEBUG\n    let opp = null;\n    let adj = null;\n    let theta = null;\n    let intX = null;\n    let intY = null;\n    let shiftX = null;\n    let shiftY = null;\n\n    // detect top collision\n    if (\n      this.posY < wall.topLeft.y &&\n      wall.topLeft.x <= this.posX &&\n      this.posX <= wall.topRight.x\n    ) {\n      // debugger\n      distance = wall.topLeft.y - this.posY;\n      // debugger\n      if (\n        distance <= this.radius &&\n        distance < this.distanceMin\n      ) {\n        // debugger\n        this.collision = \"top\";\n        this.distanceMin = distance;\n\n        // calculate shiftY\n        this.shiftY = 2 * (wall.topLeft.y - (this.posY + this.radius));\n        // debugger\n      }\n    }\n\n    // detect bottom collision\n    if (\n      this.posY > wall.bottomLeft.y &&\n      wall.topLeft.x <= this.posX &&\n      this.posX <= wall.topRight.x\n    ) {\n      // debugger\n      distance = this.posY - wall.bottomLeft.y;\n      // debugger\n      if (\n        distance <= this.radius &&\n        distance < this.distanceMin\n      ) {\n        // debugger\n        this.collision = \"bottom\";\n        this.distanceMin = distance;\n\n        // calculate shiftY\n        this.shiftY = 2 * (wall.bottomLeft.y - (this.posY - this.radius));\n        // debugger\n      }\n    }\n\n    // detect left collision\n    if (\n      this.posX < wall.topLeft.x &&\n      wall.topLeft.y <= this.posY &&\n      this.posY <= wall.bottomLeft.y\n    ) {\n      // debugger\n      distance = wall.topLeft.x - this.posX;\n      // debugger\n      if (\n        distance <= this.radius &&\n        distance < this.distanceMin  \n      ) {\n        // debugger\n        this.collision = \"left\";\n        this.distanceMin = distance;\n\n        // calculate shiftX\n        this.shiftX = 2 * (wall.topLeft.x - (this.posX + this.radius));\n        // debugger\n      }\n    }\n\n    // detect right collision\n    if (\n      this.posX > wall.topRight.x &&\n      wall.topLeft.y <= this.posY &&\n      this.posY <= wall.bottomLeft.y\n    ) {\n      // debugger\n      distance = this.posX - wall.topRight.x;\n      // debugger\n      if (\n        distance <= this.radius &&\n        distance < this.distanceMin  \n      ) {\n        // debugger\n        this.collision = \"right\";\n        this.distanceMin = distance;\n\n        // calculate shiftX\n        this.shiftX = 2 * (wall.topRight.x - (this.posX - this.radius));\n        // debugger\n      }\n    }\n\n    // detect top-left collision\n    if (\n      this.posX < wall.topLeft.x &&\n      this.posY < wall.topLeft.y\n    ) {\n      // debugger\n      distance = this.calculateDistance(this.posX, this.posY, wall.topLeft.x, wall.topLeft.y);\n      // debugger\n      if (\n        distance <= this.radius &&\n        distance < this.distanceMin\n      ) {\n        // debugger\n        opp = wall.topLeft.y - this.posY;\n        adj = wall.topLeft.x - this.posX;\n  \n        theta = Math.atan(opp / adj);\n        // debugger\n\n        intX = this.quadForm(\n          1,\n          -2 * this.posX,\n          Math.pow(this.posX, 2) + Math.pow(wall.topLeft.y - this.posY, 2) - Math.pow(this.radius, 2)\n        );\n        intY = this.quadForm(\n          1,\n          -2 * this.posY,\n          Math.pow(this.posY, 2) + Math.pow(wall.topLeft.x - this.posX, 2) - Math.pow(this.radius, 2)\n        );\n        // debugger\n        shiftX = -2 * (intX[1] - wall.topLeft.x);\n        shiftY = -2 * (intY[1] - wall.topLeft.y);\n        // debugger\n        if (theta === Math.PI / 4) {\n          // debugger\n          this.collision = \"top-left\";          \n          this.shiftX = shiftX;\n          this.shiftY = shiftY;\n        } else if (theta < Math.PI / 4) {\n          // debugger\n          this.collision = \"left\";\n          this.shiftX = shiftX;\n        } else if (theta > Math.PI / 4) {\n          // debugger\n          this.collision = \"top\";\n          this.shiftY = shiftY;\n        }\n\n        this.distanceMin = distance;\n      }\n    }\n\n    // detect top-right collision\n    if (\n      this.posX > wall.topRight.x &&\n      this.posY < wall.topRight.y\n    ) {\n      // debugger\n      distance = this.calculateDistance(this.posX, this.posY, wall.topRight.x, wall.topRight.y);\n      // debugger\n      if (\n        distance <= this.radius &&\n        distance < this.distanceMin\n      ) {\n        // debugger\n        opp = wall.topRight.y - this.posY;\n        adj = this.posX - wall.topRight.x;\n  \n        theta = Math.atan(opp / adj);\n        // debugger\n\n        intX = this.quadForm(\n          1,\n          -2 * this.posX,\n          Math.pow(this.posX, 2) + Math.pow(wall.topRight.y - this.posY, 2) - Math.pow(this.radius, 2)\n        );\n        intY = this.quadForm(\n          1,\n          -2 * this.posY,\n          Math.pow(this.posY, 2) + Math.pow(wall.topRight.x - this.posX, 2) - Math.pow(this.radius, 2)\n        );\n        // debugger\n        shiftX = 2 * (wall.topRight.x - intX[0]);\n        shiftY = -2 * (intY[1] - wall.topRight.y);\n        // debugger\n        if (theta === Math.PI / 4) {\n          // debugger\n          this.collision = \"top-right\";\n          this.shiftX = shiftX;\n          this.shiftY = shiftY;\n        } else if (theta < Math.PI / 4) {\n          // debugger\n          this.collision = \"right\";\n          this.shiftX = shiftX;\n        } else if (theta > Math.PI / 4) {\n          // debugger\n          this.collision = \"top\";\n          this.shiftY = shiftY;\n        }\n\n        this.distanceMin = distance;\n      }\n    }\n\n    // detect bottom-left collision\n    if (\n      this.posX < wall.bottomLeft.x &&\n      this.posY > wall.bottomLeft.y\n    ) {\n      // debugger\n      distance = this.calculateDistance(this.posX, this.posY, wall.bottomLeft.x, wall.bottomLeft.y);\n      // debugger\n      if (\n        distance <= this.radius &&\n        distance < this.distanceMin\n      ) {\n        // debugger\n        opp = this.posY - wall.bottomLeft.y;\n        adj = wall.bottomLeft.x - this.posX;\n  \n        theta = Math.atan(opp / adj);\n        // debugger\n\n        intX = this.quadForm(\n          1,\n          -2 * this.posX,\n          Math.pow(this.posX, 2) + Math.pow(wall.bottomLeft.y - this.posY, 2) - Math.pow(this.radius, 2)\n        );\n        intY = this.quadForm(\n          1,\n          -2 * this.posY,\n          Math.pow(this.posY, 2) + Math.pow(wall.bottomLeft.x - this.posX, 2) - Math.pow(this.radius, 2)\n        );\n        // debugger\n        shiftX = -2 * (intX[1] - wall.bottomLeft.x);\n        shiftY = 2 * (wall.bottomLeft.y - intY[0]);\n        // debugger\n        if (theta === Math.PI / 4) {\n          // debugger\n          this.collision = \"bottom-left\";\n          this.shiftX = shiftX;\n          this.shiftY = shiftY;\n        } else if (theta < Math.PI / 4) {\n          // debugger\n          this.collision = \"left\";\n          this.shiftX = shiftX;\n        } else if (theta > Math.PI / 4) {\n          // debugger\n          this.collision = \"bottom\";\n          this.shiftY = shiftY;\n        }\n\n        this.distanceMin = distance;\n      }\n    }\n\n    // detect bottom-right collision\n    if (\n      this.posX > wall.bottomRight.x &&\n      this.posY > wall.bottomRight.y\n    ) {\n      // debugger\n      distance = this.calculateDistance(this.posX, this.posY, wall.bottomRight.x, wall.bottomRight.y);\n      // debugger\n      if (\n        distance <= this.radius &&\n        distance < this.distanceMin\n      ) {\n        // debugger\n        opp = this.posY - wall.bottomRight.y;\n        adj = this.posX - wall.bottomRight.x;\n  \n        theta = Math.atan(opp / adj);\n        // debugger\n\n        intX = this.quadForm(\n          1,\n          -2 * this.posX,\n          Math.pow(this.posX, 2) + Math.pow(wall.bottomRight.y - this.posY, 2) - Math.pow(this.radius, 2)\n        );\n        intY = this.quadForm(\n          1,\n          -2 * this.posY,\n          Math.pow(this.posY, 2) + Math.pow(wall.bottomRight.x - this.posX, 2) - Math.pow(this.radius, 2)\n        );\n        // debugger\n        shiftX = 2 * (wall.bottomRight.x - intX[0]);\n        shiftY = 2 * (wall.bottomRight.y - intY[0]);\n        // debugger\n        if (theta === Math.PI / 4) {\n          // debugger\n          this.collision = \"bottom-right\";\n          this.shiftX = shiftX;\n          this.shiftY = shiftY;\n        } else if (theta < Math.PI / 4) {\n          // debugger\n          this.collision = \"right\";\n          this.shiftX = shiftX;\n        } else if (theta > Math.PI / 4) {\n          // debugger\n          this.collision = \"bottom\";\n          this.shiftY = shiftY;\n        }\n\n        this.distanceMin = distance;\n      }\n    }\n  }\n\n  detectHole() {\n    this.holes.forEach(hole => {\n      if (this.calculateDistance(this.posX, this.posY, hole.posX, hole.posY) <= hole.radius) {\n        this.fell = true;\n      }\n    })\n  }\n\n  checkFinish() {\n    if (\n      this.posX >= 20 * this.cellSize &&\n      this.posY >= 16 * this.cellSize\n    ) {\n      alert(\"YOU WIN\");\n      this.restart();\n    } else if (this.fell) {\n      alert(\"YOU DIED\");\n      this.restart();\n    }\n  }\n\n  update(deltaTime) {\n    // reset collision instance variables\n    this.collision = null;\n    this.distanceMin = this.radius;\n    this.shiftX = 0;\n    this.shiftY = 0;\n    this.fell = false;\n\n    // Update accelerations\n    this.accX = this.calculateAcc(this.tiltX, this.velX, \"x\"); // FIXME\n    this.accY = this.calculateAcc(this.tiltY, this.velY, \"y\"); // FIXME\n    \n    // Update velX\n    let prevVelX = this.velX;\n    this.velX += this.accX * deltaTime;\n    if (Math.sign(prevVelX) !== Math.sign(this.velX) && this.stopX) {\n      this.velX = 0;\n      this.accX = 0;\n    }\n    \n    // Update velY\n    let prevVelY = this.velY;\n    this.velY += this.accY * deltaTime;\n    if (Math.sign(prevVelY) !== Math.sign(this.velY) && this.stopY) {\n      this.velY = 0;\n      this.accY = 0;\n    }\n    \n    // Update posX\n    this.posX += this.velX * deltaTime;\n    if (this.posX - this.radius < 0) {\n      this.posX = this.radius;\n      this.velX = 0;\n    } else if (this.posX + this.radius > this.width) {\n      this.posX = this.width - this.radius;\n      this.velX = 0;\n    }\n    \n    // Update posY\n    this.posY += this.velY * deltaTime;\n    if (this.posY - this.radius < 0) {\n      this.posY = this.radius;\n      this.velY = 0;\n    } else if (this.posY + this.radius > this.height) {\n      this.posY = this.height - this.radius;\n      this.velY = 0;\n    }\n\n    this.checkWallCollisions();\n    this.checkBorderCollisions();\n    this.detectHole();\n\n    if (this.collision) {\n      // correct position\n      this.posX += this.shiftX;\n      this.posY += this.shiftY;\n\n      // correct velocity\n      if (\n        this.collision === \"top-left\" ||\n        this.collision === \"top-right\" ||\n        this.collision === \"bottom-left\" ||\n        this.collision === \"bottom-right\"\n      ) {\n        this.velX *= (-1 * this.bounciness);\n        this.velY *= (-1 * this.bounciness);\n      }\n      if (this.collision === \"top\" || this.collision === \"bottom\") {\n        this.velX *= this.bounciness;\n        this.velY *= (-1 * this.bounciness);\n      }\n      if (this.collision === \"left\" || this.collision === \"right\") {\n        this.velX *= (-1 * this.bounciness);\n        this.velY *= this.bounciness;\n      }\n\n    }\n    // debugger\n\n    this.checkFinish();\n  }\n\n  tiltUp(deltaTime) {\n    this.tiltY -= deltaTime * this.tiltMultiplier;\n    if (this.tiltY < -1 * this.maxTiltY) this.tiltY = -1 * this.maxTiltY;\n  }\n\n  tiltDown(deltaTime) {\n    this.tiltY += deltaTime * this.tiltMultiplier;\n    if (this.tiltY > this.maxTiltY) this.tiltY = this.maxTiltY;\n  }\n\n  tiltLeft(deltaTime) {\n    this.tiltX -= deltaTime * this.tiltMultiplier;\n    if (this.tiltX < -1 * this.maxTiltX) this.tiltX = -1 * this.maxTiltX;\n  }\n\n  tiltRight(deltaTime) {\n    this.tiltX += deltaTime * this.tiltMultiplier;\n    if (this.tiltX > this.maxTiltX) this.tiltX = this.maxTiltX;\n  }\n}","export default class Hole {\n  constructor(id, posCellX, posCellY) {\n    this.cellSize = 36; // DRY me!\n    this.id = id;\n    this.posCellX = posCellX;\n    this.posCellY = posCellY;\n    this.posX = this.posCellX * this.cellSize;\n    this.posY = this.posCellY * this.cellSize;\n\n    this.radius = (this.cellSize * 0.75) / 2 + 16; // FIXME\n  }\n\n  draw(ctx) {\n    // // draw hole\n    // ctx.fillStyle = \"gray\";\n    // ctx.beginPath();\n    // ctx.arc(this.posX, this.posY, this.radius, 0, 2 * Math.PI);\n    // ctx.fill();\n\n    // draw shadow\n    const grd = ctx.createRadialGradient(this.posX, this.posY, 0, this.posX, this.posY, this.radius + 10)\n    grd.addColorStop(0, \"black\");\n    grd.addColorStop(1, \"gray\");\n    ctx.fillStyle = grd;\n    ctx.beginPath();\n    ctx.arc(this.posX, this.posY, this.radius, 0, 2 * Math.PI);\n    ctx.fill();\n    \n  }\n}","import Hole from \"./hole\";\n\nconst holes = [\n  new Hole(1, 15, 1),\n  new Hole(2, 5, 3),\n  new Hole(3, 9, 3),\n  new Hole(4, 17, 6),\n  new Hole(5, 11, 7),\n  new Hole(6, 1, 9),\n  new Hole(7, 13, 10),\n  new Hole(8, 3, 11),\n  new Hole(9, 9, 11),\n  new Hole(10, 21, 13),\n  new Hole(11, 5, 17),\n  new Hole(12, 7, 17)\n];\n\nexport default holes;","import './styles/index.scss';\nimport InputHandler from \"./scripts/input\";\nimport Game from \"./scripts/game\";\nimport Board from \"./scripts/board\";\nimport Marble from \"./scripts/marble\";\nimport walls from \"./scripts/walls\";\nimport holes from \"./scripts/holes\";\n\nlet canvas = document.getElementById(\"game-screen\");\nlet ctx = canvas.getContext(\"2d\");\n\nexport const CELL_SIZE = 36; // Game size multiplier\nexport const WALL_RADIUS = 2;\nexport const GAME_WIDTH = 22 * CELL_SIZE;\nexport const GAME_HEIGHT = 18 * CELL_SIZE;\n// const MARBLE_SIZE = 20;\nconst MARBLE_RADIUS = CELL_SIZE / 3;\n\nlet board = new Board(GAME_WIDTH, GAME_HEIGHT);\nlet marble = new Marble(MARBLE_RADIUS, GAME_WIDTH, GAME_HEIGHT, walls, holes);\nlet inputHandler = new InputHandler(marble);\nlet game = new Game(board, marble, walls, holes);\n\nlet lastTime = 0;\n\nfunction gameLoop(timestamp) {\n  let deltaTime = timestamp - lastTime;\n  lastTime = timestamp;\n\n  inputHandler.handleInput(deltaTime);\n  ctx.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT);\n  game.update(deltaTime);\n  game.draw(ctx);\n\n  requestAnimationFrame(gameLoop);\n}\n\nrequestAnimationFrame(gameLoop);\n"],"sourceRoot":""}