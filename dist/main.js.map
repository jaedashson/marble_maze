{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/scripts/input.js","webpack:///./src/scripts/game.js","webpack:///./src/scripts/board.js","webpack:///./src/scripts/wall.js","webpack:///./src/scripts/walls.js","webpack:///./src/scripts/marble.js","webpack:///./src/scripts/hole.js","webpack:///./src/scripts/holes.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","InputHandler","marble","this","keys","window","addEventListener","e","preventDefault","keyCode","type","deltaTime","tiltUp","tiltDown","tiltLeft","tiltRight","restart","Game","board","walls","holes","update","accX","accY","ctx","fillStyle","font","strokeStyle","fillText","startY","rect","startX","stroke","beginPath","moveTo","lineTo","tiltMeterPosX","tiltX","maxTiltX","tiltMeterPosY","tiltY","maxTiltY","drawStartFinish","draw","forEach","wall","hole","drawHUD","Board","width","height","Wall","id","startXCell","startYCell","orientation","length","cellSize","wallRadius","modStart","modEnd","radius","topLeft","topRight","bottomLeft","bottomRight","wallWidth","wallHeight","center","calculateDimensions","calculateCenter","x","y","fillRect","Marble","startPosX","startPosY","velX","velY","posX","posY","grav","fricSCoeff","fricKCoeff","tiltSensitivity","bounciness","stopX","stopY","halfOfLongestWallLength","distRadius","Math","sqrt","pow","collision","distanceMin","shiftX","shiftY","fell","arc","PI","fill","a","b","x1","y1","x2","y2","rad","cos","vel","deg","axis","dirFric","dirTilt","sign","degToRad","abs","acc","sin","fric","accNet","wallsToCheck","calculateDistance","push","detectCollision","distance","opp","adj","theta","intX","intY","atan","quadForm","alert","calculateAcc","prevVelX","prevVelY","checkWallCollisions","detectHole","checkFinish","Hole","posCellX","posCellY","grd","createRadialGradient","addColorStop","document","getElementById","getContext","CELL_SIZE","WALL_RADIUS","GAME_WIDTH","GAME_HEIGHT","MARBLE_RADIUS","inputHandler","game","lastTime","requestAnimationFrame","gameLoop","timestamp","handleInput","clearRect"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export default class InputHandler {\n  constructor(marble) {\n    this.marble = marble;\n    this.keys;\n\n    window.addEventListener(\"keydown\", e => {\n      e.preventDefault();\n      this.keys = (this.keys || []);\n      this.keys[e.keyCode] = (e.type == \"keydown\");\n    })\n\n    window.addEventListener(\"keyup\", e => {\n      e.preventDefault();\n      this.keys[e.keyCode] = (e.type == \"keydown\");\n    })\n  }\n\n  handleInput(deltaTime) {\n    if (this.keys && this.keys[87]) { this.marble.tiltUp(deltaTime); }\n    if (this.keys && this.keys[83]) { this.marble.tiltDown(deltaTime); }\n    if (this.keys && this.keys[65]) { this.marble.tiltLeft(deltaTime); }\n    if (this.keys && this.keys[68]) { this.marble.tiltRight(deltaTime); }\n    if (this.keys && this.keys[82]) { this.marble.restart() }\n  }\n}","export default class Game {\n  constructor(board, marble, walls, holes) {\n    debugger\n    this.board = board;\n    this.marble = marble;\n    this.walls = walls;\n    this.holes = holes;\n  }\n  \n  update(deltaTime) {\n    this.marble.update(deltaTime, this.board.accX, this.board.accY);\n  }\n\n  drawHUD(ctx) {\n    const fontSize = 16;\n\n    ctx.fillStyle = \"blue\";\n    ctx.font = `${fontSize}px Arial`;\n\n    // FIXME - delete for final game\n    // ctx.fillText(`tiltX=${this.marble.tiltX}`, 20, 26);\n    // ctx.fillText(`tiltY=${this.marble.tiltY}`, 420, 26)\n    // ctx.fillText(`accX=${this.marble.accX}`, 20, 56);\n    // ctx.fillText(`accY=${this.marble.accY}`, 420, 56);\n    // ctx.fillText(`velX=${this.marble.velX}`, 20, 86);\n    // ctx.fillText(`velY=${this.marble.velY}`, 420, 86);\n\n    // final HUD\n    const startX = 140;\n    const startY = 10;\n\n    const tiltBarLength = 160;\n    const tiltBarHeight = 20;\n\n    ctx.strokeStyle = \"black\";\n    ctx.fillText(`x-direction`, startX, startY + fontSize);\n    ctx.fillText(`y-direction`, startX, startY + fontSize + 30);\n    ctx.rect(startX + 80, startY, tiltBarLength, tiltBarHeight);\n    ctx.rect(startX + 80, startY + 30, tiltBarLength, tiltBarHeight);\n    ctx.stroke();\n\n    // tilt bar center line\n    ctx.strokeStyle = \"gray\";\n    ctx.beginPath();\n    ctx.moveTo(startX + 80 + (tiltBarLength / 2), startY);\n    ctx.lineTo(startX + 80 + (tiltBarLength / 2), startY + tiltBarHeight);\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.moveTo(startX + 80 + (tiltBarLength / 2), startY + 30);\n    ctx.lineTo(startX + 80 + (tiltBarLength / 2), startY + tiltBarHeight + 30);\n    ctx.stroke();\n    \n    // ctx.beginPath()\n    \n    \n    // tilt meter\n    const tiltPercentX = this.marble.tiltX / this.marble.maxTiltX;\n    const tiltPercentY = this.marble.tiltY / this.marble.maxTiltY;\n    const tiltMeterPosX = tiltPercentX * (tiltBarLength / 2);\n    const tiltMeterPosY = tiltPercentY * (tiltBarLength / 2);\n\n    ctx.strokeStyle = \"orange\";\n    ctx.beginPath();\n    ctx.moveTo(startX + 80 + (tiltBarLength / 2) + tiltMeterPosX, startY);\n    ctx.lineTo(startX + 80 + (tiltBarLength / 2) + tiltMeterPosX, startY + tiltBarHeight);\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.moveTo(startX + 80 + (tiltBarLength / 2) + tiltMeterPosY, startY + 30);\n    ctx.lineTo(startX + 80 + (tiltBarLength / 2) + tiltMeterPosY, startY + tiltBarHeight + 30);\n    ctx.stroke();\n\n\n  }\n\n  drawStartFinish(ctx) {\n    ctx.fillStyle = \"red\";\n    ctx.fillText(\"START\", 36 * 17 - 24, 17 * 36);\n\n    ctx.fillStyle = \"green\";\n    ctx.fillText(\"FINISH\", 21 * 36 - 22, 17 * 36 + 8);\n    \n    ctx.strokeStyle = \"green\";\n    ctx.beginPath();\n    ctx.rect(20 * 36, 16 * 36, 2 * 36, 2 * 36);\n    ctx.stroke();\n  }\n\n  draw(ctx) {\n    this.drawStartFinish(ctx);\n\n    this.board.draw(ctx);\n    this.walls.forEach(wall => wall.draw(ctx));\n    this.holes.forEach(hole => hole.draw(ctx));\n    this.marble.draw(ctx);\n    this.drawHUD(ctx);\n  }\n}","export default class Board {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n  }\n\n  draw(ctx) {\n    ctx.strokeStyle = \"black\";\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    ctx.lineTo(this.width, 0);\n    ctx.lineTo(this.width, this.height);\n    ctx.lineTo(0, this.height);\n    ctx.lineTo(0, 0);\n    ctx.stroke();\n  }\n}","import { CELL_SIZE, WALL_RADIUS } from \"../index\"; // Why don't these imports work?\n\n// modStart > 0 => extend the starting portion of the wall\n// modStart < 0 => shorten the starting portion of the wall\n// modEnd > 0 => extend the ending portion of the wall\n// modEnd < 0 => shorten the ending portion of the wall\n\nexport default class Wall {\n  constructor(id, startXCell, startYCell, orientation, length, cellSize, wallRadius, modStart, modEnd) {\n    // debugger // FIXME\n    this.id = id;\n    this.startXCell = startXCell;\n    this.startYCell = startYCell;\n    this.orientation = orientation;\n    this.length = length;\n    this.cellSize = 36; // Game size multiplier\n    this.radius = 2; // Half of wall thickness\n    this.modStart = modStart;\n    this.modEnd = modEnd;\n\n\n    // Calculate dimensions\n    this.topLeft;\n    this.topRight;\n    this.bottomLeft;\n    this.bottomRight;\n    this.wallWidth;\n    this.wallHeight;\n    this.center;\n    this.calculateDimensions();\n    this.calculateCenter();\n\n    // debugger\n  }\n\n  calculateCenter() {\n    // debugger\n    this.center = {\n      x: (this.topRight.x + this.topLeft.x) / 2,\n      y: (this.topLeft.y + this.bottomLeft.y) / 2\n    };\n    // debugger\n  }\n\n  calculateDimensions() {\n    // debugger\n    if (this.orientation === \"x\") {\n      this.topLeft = {\n        x: this.startXCell * this.cellSize,\n        y: this.startYCell * this.cellSize - this.radius\n      };\n      this.bottomLeft = {\n        x: this.startXCell * this.cellSize,\n        y: this.startYCell * this.cellSize + this.radius\n      };\n      \n      if (this.modStart < 0) {\n        this.topLeft.x += this.radius;\n        this.bottomLeft.x += this.radius;\n      } else if (this.modStart > 0) {\n        this.topLeft.x -= this.radius;\n        this.bottomLeft.x -= this.radius;\n      }\n\n      this.topRight = {\n        x: (this.startXCell + this.length) * this.cellSize,\n        y: this.startYCell * this.cellSize - this.radius\n      };\n      this.bottomRight = {\n        x: (this.startXCell + this.length) * this.cellSize,\n        y: this.startYCell * this.cellSize + this.radius\n      };\n\n      if (this.modEnd < 0) {\n        this.topRight.x -= this.radius;\n        this.bottomRight.x -= this.radius;\n      } else if (this.modEnd > 0) {\n        this.topRight.x += this.radius;\n        this.bottomRight.x += this.radius;\n      }\n\n    } else if (this.orientation === \"y\") {\n      this.topLeft = {\n        x: this.startXCell * this.cellSize - this.radius,\n        y: this.startYCell * this.cellSize\n      };\n      this.topRight = {\n        x: this.startXCell * this.cellSize + this.radius,\n        y: this.startYCell * this.cellSize\n      };\n\n      if (this.modStart < 0) {\n        this.topLeft.y += this.radius;\n        this.topRight.y += this.radius;\n      } else if (this.modStart > 0) {\n        this.topLeft.y -= this.radius;\n        this.topRight.y -= this.radius;\n      }\n\n      this.bottomLeft = {\n        x: this.startXCell * this.cellSize - this.radius,\n        y: (this.startYCell + this.length) * this.cellSize \n      };\n      this.bottomRight = {\n        x: this.startXCell * this.cellSize + this.radius,\n        y: (this.startYCell + this.length) * this.cellSize\n      };\n\n      if (this.modEnd < 0) {\n        this.bottomLeft.y -= this.radius;\n        this.bottomRight.y -= this.radius;\n      } else if (this.modEnd > 0) {\n        this.bottomLeft.y += this.radius;\n        this.bottomRight.y += this.radius;\n      }\n    }\n\n    // Calculate wallWidth and wallHeight\n    this.wallWidth = this.topRight.x - this.topLeft.x;\n    this.wallHeight = this.bottomLeft.y - this.topLeft.y;\n    // debugger\n  }\n\n  draw(ctx) {\n    // debugger\n\n    // FIXME - delete for for final game\n    // Draw id label\n    // ctx.fillStyle = \"blue\";\n    // ctx.font = \"12 px Arial\";\n    // ctx.fillText(`${this.id}`, this.center.x, this.center.y);\n\n    // debugger\n    \n    // Draw wall\n    ctx.fillStyle = \"black\";\n    ctx.fillRect(this.topLeft.x, this.topLeft.y, this.topRight.x - this.topLeft.x, this.bottomLeft.y - this.topLeft.y); // FIXME - Refactor to include wallWidth and wallHeight\n    // debugger\n\n    // FIXME - delete for final game\n    // Draw center\n    // ctx.fillStyle = \"red\";\n    // ctx.beginPath();\n    // ctx.arc(this.center.x, this.center.y, 2, 0, 2 * Math.PI);\n    // ctx.fill(); \n  }\n}","import Wall from \"./wall\";\nimport { CELL_SIZE, WALL_RADIUS } from \"../index\"; // TODO - Why don't these imports work?\n\n// new Wall(id, startXCell, startYCell, orientation, length, cellSize, wallRadius, modStart, modEnd)\nconst walls = [\n  new Wall(1, 18, 0, \"y\", 2, 36, 2, 0, 1), // 1\n  new Wall(2, 0, 2, \"x\", 2, 36, 2, 0, 0), // 2\n  new Wall(3, 10, 2, \"x\", 2, 36, 2, 0, 0), // 3\n  new Wall(4, 16, 2, \"x\", 2, 36, 2, 0, -1), // 4\n  new Wall(5, 6, 2, \"y\", 4, 36, 2, 0, -1), // 5\n  new Wall(6, 8, 2, \"y\", 2, 36, 2, 0, 0), // 6\n  new Wall(7, 20, 2, \"y\", 2, 36, 2, 0, 1), // 7\n  new Wall(8, 2, 4, \"x\", 2, 36, 2, 1, 0), // 8\n  new Wall(9, 10, 4, \"x\", 2, 36, 2, 0, 0), // 9\n  new Wall(10, 16, 4, \"x\", 4, 36, 2, 0, -1), // 10\n  new Wall(11, 2, 4, \"y\", 2, 36, 2, -1, 0), // 11\n  new Wall(12, 14, 4, \"y\", 2, 36, 2, 0, -1), // 12\n  new Wall(13, 4, 6, \"x\", 6, 36, 2, 0, 0), // 13\n  new Wall(14, 12, 6, \"x\", 4, 36, 2, 1, 1), // 14\n  new Wall(15, 20, 6, \"x\", 2, 36, 2, 0, 0), // 15\n  new Wall(16, 12, 6, \"y\", 2, 36, 2, -1, -1), // 16\n  new Wall(17, 16, 6, \"y\", 8, 36, 2, -1, -1), // 17\n  new Wall(18, 18, 6, \"y\", 2, 36, 2, 0, 0), // 18\n  new Wall(19, 0, 8, \"x\", 4, 36, 2, 0, 0), // 19\n  new Wall(20, 10, 8, \"x\", 4, 36, 2, 0, 0), // 20\n  new Wall(21, 6, 8, \"y\", 4, 36, 2, 0, -1), // 21\n  new Wall(22, 8, 8, \"y\", 2, 36, 2, 0, 0), // 22\n  new Wall(23, 20, 8, \"y\", 2, 36, 2, 0, 1), // 23\n  new Wall(24, 2, 10, \"x\", 2, 36, 2, 0, 0), // 24\n  new Wall(25, 16, 10, \"x\", 4, 36, 2, -1, -1), // 25\n  new Wall(26, 4, 12, \"x\", 4, 36, 2, 1, 1), // 26\n  new Wall(27, 12, 12, \"x\", 2, 36, 2, 1, 0), // 27\n  new Wall(28, 18, 12, \"x\", 2, 36, 2, 0, 1), // 28\n  new Wall(29, 2, 12, \"y\", 2, 36, 2, 0, 0), // 29\n  new Wall(30, 4, 12, \"y\", 4, 36, 2, -1, 1), // 30\n  new Wall(31, 8, 12, \"y\", 4, 36, 2, -1, 1), // 31\n  new Wall(32, 10, 12, \"y\", 2, 36, 2, 0, 0), // 32\n  new Wall(33, 12, 12, \"y\", 2, 36, 2, -1, 0), // 33\n  new Wall(34, 20, 12, \"y\", 2, 36, 2, -1, 1), // 34\n  new Wall(35, 14, 14, \"x\", 4, 36, 2, 0, 1), // 35\n  new Wall(36, 20, 14, \"x\", 2, 36, 2, -1, 0), // 36\n  new Wall(37, 6, 14, \"y\", 4, 36, 2, 0, 0), // 37\n  new Wall(38, 18, 14, \"y\", 4, 36, 2, -1, 0), // 38\n  new Wall(39, 2, 16, \"x\", 2, 36, 2, 0, -1), // 39\n  new Wall(40, 8, 16, \"x\", 8, 36, 2, -1, 0), // 40\n];\n\nexport default walls;","import walls from \"./walls\";\nimport {\n  quadForm,\n  degToRad,\n  calculateDistance\n} from \"./util\"; // HELP - Why isn't this import working?\nimport * as util from \"./util\"; // HELP - Why isn't this import working?\n\nexport default class Marble {\n  constructor(radius, width, height, walls, holes) {\n    this.radius = radius; // Radius of the marble\n    this.width = width; // Width of the board\n    this.height = height; // Height of the board\n    this.walls = walls;\n    this.holes = holes;\n\n    this.cellSize = 36; // Game size adjustment\n    \n    this.maxTiltX = 45;\n    this.maxTiltY = 45;\n    this.startPosX = this.cellSize * 17; // TODO - For final game, set to this.cellSize * 17\n    this.startPosY = this.cellSize * 17; // TODO - For final game, set to this.cellSize * 17\n\n    this.tiltX = 0; // TEST\n    this.tiltY = 0; // TEST\n    this.accX = 0;\n    this.accY = 0;\n    this.velX = 0;\n    this.velY = 0;\n    this.posX = this.startPosX;\n    this.posY = this.startPosY;\n    \n    this.grav = 0.0025; // Acceleration due to gravity\n    this.fricSCoeff = 0.05; // Static friction coefficient\n    this.fricKCoeff = 0.05; // Kinetic friction coefficient\n    this.tiltSensitivity = 0.03;\n    this.bounciness = 0.1; // TODO - Delete\n    this.stopX = false; // Prevents movement in x-direction if true\n    this.stopY = false; // Prevents movement in y-direction if true\n\n    this.wallRadius = 2;\n    // TODO - Change this so that it is dynamic based on this.walls\n    this.halfOfLongestWallLength = 4; // Used to calculate this.distRadius\n\n    // The farthest a marble's center can be from a wall's center and still possibly collide\n    // Used to calculate which walls to check for collision\n    this.distRadius = Math.sqrt(Math.pow(this.wallRadius, 2) + Math.pow(this.halfOfLongestWallLength * this.cellSize + this.wallRadius, 2)) + this.radius;\n    \n    this.collision = null; // Collision type, if any\n    this.distanceMin = this.radius; // HELP - What does this do?\n    this.shiftX = 0; // Correction for posX after collision\n    this.shiftY = 0; // Correction for posY after collision\n    this.fell = false; // true if marble fell into hole\n    // debugger;\n  }\n\n  restart() {\n    this.tiltX = 0;\n    this.tiltY = 0;\n    this.accX = 0;\n    this.accY = 0;\n    this.velX = 0;\n    this.velY = 0;\n    this.posX = this.startPosX;\n    this.posY = this.startPosY;\n  }\n\n  draw(ctx) {\n    ctx.fillStyle = \"orange\";\n    ctx.beginPath();\n    ctx.arc(this.posX, this.posY, this.radius, 0, 2 * Math.PI);\n    ctx.fill();\n\n    ctx.beginPath();\n    // debugger\n\n    // FIXME - Delete for final game\n    // ctx.arc(this.posX, this.posY, this.distRadius, 0, 2 * Math.PI);\n    // ctx.stroke();\n\n  }\n\n  // TODO - Replace with util function\n  quadForm(a, b, c) {\n    // debugger\n    let soln1 = null;\n    let soln2 = null;\n\n    soln1 = (-b - Math.sqrt( b*b - 4 * a * c )) / (2 * a);\n    soln2 = (-b + Math.sqrt( b*b - 4 * a * c )) / (2 * a);\n    // debugger\n    return [soln1, soln2];\n  }\n\n  // TODO - Replace with util function\n  calculateDistance(x1, y1, x2, y2) {\n    // debugger\n    const dist = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n    // debugger\n    return dist;\n  }\n\n  calculateFricS(rad) {\n    return this.fricSCoeff * this.grav * Math.cos(rad);\n  }\n\n  calculateFricK(rad, vel) {\n    return this.fricKCoeff * this.grav * Math.cos(rad);\n  }\n\n  // TODO - Replace with util function\n  degToRad(deg) {\n    return deg * (Math.PI / 180);\n  }\n\n  calculateAcc(deg, vel, axis) {\n    // console.log(\"calculating acceleration!\");\n    let dirTilt = Math.sign(deg); // -1 or 1 based on tilt on axis\n    let dirFric;\n\n    if (vel === 0) { \n      dirFric = -1 * dirTilt; // If marble is not already moving on this axis, direction of friction is opposite of direction of TILT.\n    } else {\n      dirFric = -1 * Math.sign(vel); // If marble IS moving on this axis, friction is opposite of direction of VELOCITY.\n    }\n\n    // debugger\n\n    let rad = this.degToRad(Math.abs(deg));\n\n    let acc = dirTilt * this.grav * Math.sin(rad);\n    let fric = dirFric * this.fricKCoeff * this.grav * Math.cos(rad);\n    let accNet = acc + fric;\n\n    // If acceleration does not overcome friction and acceleration is not in the direction of velocity, marble should not move on this axis.\n    if (\n      Math.abs(acc) <= Math.abs(fric) &&\n      Math.sign(accNet) !== Math.sign(vel) // HELP - What does this do?\n    ) {\n      if (axis === \"x\") this.stopX = true;\n      if (axis === \"y\") this.stopY = true;\n    } else {\n      if (axis === \"x\") this.stopX = false;\n      if (axis === \"y\") this.stopY = false;\n    }\n\n    return accNet;\n  }\n\n\n\n  checkBorderCollisions() {\n    if (this.posX - this.radius < 0) {\n      this.collision = \"right\";\n      this.shiftX = 2 * (0 - (this.posX - this.radius));\n    } else if (this.posX + this.radius > this.width) {\n      this.collision = \"left\";\n      this.shiftX = -2 * ((this.posX + this.radius) - this.width);\n    }\n\n    if (this.posY - this.radius < 0) {\n      this.collision = \"bottom\";\n      this.shiftY = 2 * (0 - (this.posY - this.radius));\n    } else if (this.posY + this.radius > this.height) {\n      this.collision = \"top\";\n      this.shiftY = -2 * ((this.posY + this.radius) - this.height);\n    }\n  }\n\n  // Iterate through walls and check for collision\n  checkWallCollisions() {\n    // debugger\n\n    const wallsToCheck = [];\n\n    this.walls.forEach(wall => {\n      // debugger\n\n      if (this.calculateDistance(this.posX, this.posY, wall.center.x, wall.center.y) <= this.distRadius) {\n        // debugger\n        wallsToCheck.push(wall);\n      }\n    })\n\n    // debugger\n\n    wallsToCheck.forEach(wall => {\n      this.detectCollision(wall);\n    })\n  }\n\n  detectCollision(wall) {\n    let distance = null; // DEBUG\n    let opp = null;\n    let adj = null;\n    let theta = null;\n    let intX = null;\n    let intY = null;\n    let shiftX = null;\n    let shiftY = null;\n\n\n    // DETECT CORNER\n\n    // Detect top collision\n    if (\n      this.posY < wall.topLeft.y &&\n      wall.topLeft.x <= this.posX &&\n      this.posX <= wall.topRight.x\n    ) {\n      // debugger\n      distance = wall.topLeft.y - this.posY;\n      // debugger\n      if (\n        distance <= this.radius &&\n        distance < this.distanceMin\n      ) {\n        // debugger\n        this.collision = \"top\";\n        this.distanceMin = distance;\n\n        // calculate shiftY\n        this.shiftY = wall.topLeft.y - (this.posY + this.radius);\n        // debugger\n      }\n    }\n\n    // detect bottom collision\n    if (\n      this.posY > wall.bottomLeft.y &&\n      wall.topLeft.x <= this.posX &&\n      this.posX <= wall.topRight.x\n    ) {\n      // debugger\n      distance = this.posY - wall.bottomLeft.y;\n      // debugger\n      if (\n        distance <= this.radius &&\n        distance < this.distanceMin\n      ) {\n        // debugger\n        this.collision = \"bottom\";\n        this.distanceMin = distance;\n\n        // calculate shiftY\n        this.shiftY = wall.bottomLeft.y - (this.posY - this.radius);\n        // debugger\n      }\n    }\n\n    // detect left collision\n    if (\n      this.posX < wall.topLeft.x &&\n      wall.topLeft.y <= this.posY &&\n      this.posY <= wall.bottomLeft.y\n    ) {\n      // debugger\n      distance = wall.topLeft.x - this.posX;\n      // debugger\n      if (\n        distance <= this.radius &&\n        distance < this.distanceMin  \n      ) {\n        // debugger\n        this.collision = \"left\";\n        this.distanceMin = distance;\n\n        // calculate shiftX\n        this.shiftX = wall.topLeft.x - (this.posX + this.radius);\n        // debugger\n      }\n    }\n\n    // detect right collision\n    if (\n      this.posX > wall.topRight.x &&\n      wall.topLeft.y <= this.posY &&\n      this.posY <= wall.bottomLeft.y\n    ) {\n      // debugger\n      distance = this.posX - wall.topRight.x;\n      // debugger\n      if (\n        distance <= this.radius &&\n        distance < this.distanceMin  \n      ) {\n        // debugger\n        this.collision = \"right\";\n        this.distanceMin = distance;\n\n        // calculate shiftX\n        this.shiftX = wall.topRight.x - (this.posX - this.radius);\n        // debugger\n      }\n    }\n\n    // detect top-left collision\n    if (\n      this.posX < wall.topLeft.x &&\n      this.posY < wall.topLeft.y\n    ) {\n      // debugger\n      distance = this.calculateDistance(this.posX, this.posY, wall.topLeft.x, wall.topLeft.y);\n      // debugger\n      if (\n        distance <= this.radius &&\n        distance < this.distanceMin\n      ) {\n        // debugger\n        opp = wall.topLeft.y - this.posY;\n        adj = wall.topLeft.x - this.posX;\n  \n        theta = Math.atan(opp / adj);\n        // debugger\n\n        intX = this.quadForm(\n          1,\n          -2 * this.posX,\n          Math.pow(this.posX, 2) + Math.pow(wall.topLeft.y - this.posY, 2) - Math.pow(this.radius, 2)\n        );\n        intY = this.quadForm(\n          1,\n          -2 * this.posY,\n          Math.pow(this.posY, 2) + Math.pow(wall.topLeft.x - this.posX, 2) - Math.pow(this.radius, 2)\n        );\n        // debugger\n        shiftX = intX[1] - wall.topLeft.x;\n        shiftY = intY[1] - wall.topLeft.y;\n        // debugger\n        if (theta === Math.PI / 4) {\n          // debugger\n          this.collision = \"top-left\";          \n          this.shiftX = shiftX;\n          this.shiftY = shiftY;\n        } else if (theta < Math.PI / 4) {\n          // debugger\n          this.collision = \"left\";\n          this.shiftX = shiftX;\n        } else if (theta > Math.PI / 4) {\n          // debugger\n          this.collision = \"top\";\n          this.shiftY = shiftY;\n        }\n\n        this.distanceMin = distance;\n      }\n    }\n\n    // detect top-right collision\n    if (\n      this.posX > wall.topRight.x &&\n      this.posY < wall.topRight.y\n    ) {\n      // debugger\n      distance = this.calculateDistance(this.posX, this.posY, wall.topRight.x, wall.topRight.y);\n      // debugger\n      if (\n        distance <= this.radius &&\n        distance < this.distanceMin\n      ) {\n        // debugger\n        opp = wall.topRight.y - this.posY;\n        adj = this.posX - wall.topRight.x;\n  \n        theta = Math.atan(opp / adj);\n        // debugger\n\n        intX = this.quadForm(\n          1,\n          -2 * this.posX,\n          Math.pow(this.posX, 2) + Math.pow(wall.topRight.y - this.posY, 2) - Math.pow(this.radius, 2)\n        );\n        intY = this.quadForm(\n          1,\n          -2 * this.posY,\n          Math.pow(this.posY, 2) + Math.pow(wall.topRight.x - this.posX, 2) - Math.pow(this.radius, 2)\n        );\n        // debugger\n        shiftX = wall.topRight.x - intX[0];\n        shiftY = intY[1] - wall.topRight.y;\n        // debugger\n        if (theta === Math.PI / 4) {\n          // debugger\n          this.collision = \"top-right\";\n          this.shiftX = shiftX;\n          this.shiftY = shiftY;\n        } else if (theta < Math.PI / 4) {\n          // debugger\n          this.collision = \"right\";\n          this.shiftX = shiftX;\n        } else if (theta > Math.PI / 4) {\n          // debugger\n          this.collision = \"top\";\n          this.shiftY = shiftY;\n        }\n\n        this.distanceMin = distance;\n      }\n    }\n\n    // detect bottom-left collision\n    if (\n      this.posX < wall.bottomLeft.x &&\n      this.posY > wall.bottomLeft.y\n    ) {\n      // debugger\n      distance = this.calculateDistance(this.posX, this.posY, wall.bottomLeft.x, wall.bottomLeft.y);\n      // debugger\n      if (\n        distance <= this.radius &&\n        distance < this.distanceMin\n      ) {\n        // debugger\n        opp = this.posY - wall.bottomLeft.y;\n        adj = wall.bottomLeft.x - this.posX;\n  \n        theta = Math.atan(opp / adj);\n        // debugger\n\n        intX = this.quadForm(\n          1,\n          -2 * this.posX,\n          Math.pow(this.posX, 2) + Math.pow(wall.bottomLeft.y - this.posY, 2) - Math.pow(this.radius, 2)\n        );\n        intY = this.quadForm(\n          1,\n          -2 * this.posY,\n          Math.pow(this.posY, 2) + Math.pow(wall.bottomLeft.x - this.posX, 2) - Math.pow(this.radius, 2)\n        );\n        // debugger\n        shiftX = intX[1] - wall.bottomLeft.x;\n        shiftY = wall.bottomLeft.y - intY[0];\n        // debugger\n        if (theta === Math.PI / 4) {\n          // debugger\n          this.collision = \"bottom-left\";\n          this.shiftX = shiftX;\n          this.shiftY = shiftY;\n        } else if (theta < Math.PI / 4) {\n          // debugger\n          this.collision = \"left\";\n          this.shiftX = shiftX;\n        } else if (theta > Math.PI / 4) {\n          // debugger\n          this.collision = \"bottom\";\n          this.shiftY = shiftY;\n        }\n\n        this.distanceMin = distance;\n      }\n    }\n\n    // detect bottom-right collision\n    if (\n      this.posX > wall.bottomRight.x &&\n      this.posY > wall.bottomRight.y\n    ) {\n      // debugger\n      distance = this.calculateDistance(this.posX, this.posY, wall.bottomRight.x, wall.bottomRight.y);\n      // debugger\n      if (\n        distance <= this.radius &&\n        distance < this.distanceMin\n      ) {\n        // debugger\n        opp = this.posY - wall.bottomRight.y;\n        adj = this.posX - wall.bottomRight.x;\n  \n        theta = Math.atan(opp / adj);\n        // debugger\n\n        intX = this.quadForm(\n          1,\n          -2 * this.posX,\n          Math.pow(this.posX, 2) + Math.pow(wall.bottomRight.y - this.posY, 2) - Math.pow(this.radius, 2)\n        );\n        intY = this.quadForm(\n          1,\n          -2 * this.posY,\n          Math.pow(this.posY, 2) + Math.pow(wall.bottomRight.x - this.posX, 2) - Math.pow(this.radius, 2)\n        );\n        // debugger\n        shiftX = wall.bottomRight.x - intX[0];\n        shiftY = wall.bottomRight.y - intY[0];\n        // debugger\n        if (theta === Math.PI / 4) {\n          // debugger\n          this.collision = \"bottom-right\";\n          this.shiftX = shiftX;\n          this.shiftY = shiftY;\n        } else if (theta < Math.PI / 4) {\n          // debugger\n          this.collision = \"right\";\n          this.shiftX = shiftX;\n        } else if (theta > Math.PI / 4) {\n          // debugger\n          this.collision = \"bottom\";\n          this.shiftY = shiftY;\n        }\n\n        this.distanceMin = distance;\n      }\n    }\n  }\n\n  detectHole() {\n    this.holes.forEach(hole => {\n      if (this.calculateDistance(this.posX, this.posY, hole.posX, hole.posY) <= hole.radius) {\n        this.fell = true;\n      }\n    })\n  }\n\n  checkFinish() {\n    if (\n      this.posX >= 20 * this.cellSize &&\n      this.posY >= 16 * this.cellSize\n    ) {\n      alert(\"YOU WIN\");\n      this.restart();\n    } else if (this.fell) {\n      // alert(\"YOU DIED\");\n      this.restart();\n    }\n  }\n\n  update(deltaTime) {\n    // Reset collision instance variables\n    this.collision = null;\n    this.distanceMin = this.radius;\n    this.shiftX = 0;\n    this.shiftY = 0;\n    this.fell = false;\n\n    // Update accelerations\n    this.accX = this.calculateAcc(this.tiltX, this.velX, \"x\");\n    this.accY = this.calculateAcc(this.tiltY, this.velY, \"y\");\n    \n    // Update velX\n    let prevVelX = this.velX;\n    this.velX += this.accX * deltaTime;\n    // If velocity changes direction and this.stopX is true\n    if (Math.sign(prevVelX) !== Math.sign(this.velX) && this.stopX) {\n      this.velX = 0;\n      this.accX = 0;\n    }\n    \n    // Update velY\n    let prevVelY = this.velY;\n    this.velY += this.accY * deltaTime;\n    // If velocity changes direction and this.stopY is true\n    if (Math.sign(prevVelY) !== Math.sign(this.velY) && this.stopY) {\n      this.velY = 0;\n      this.accY = 0;\n    }\n    \n    // Update posX\n    this.posX += this.velX * deltaTime;\n    if (this.posX - this.radius < 0) { // If marble hits left border of maze\n      this.posX = this.radius;\n      this.velX = 0;\n    } else if (this.posX + this.radius > this.width) { // If marble hits right border of maze\n      this.posX = this.width - this.radius;\n      this.velX = 0;\n    }\n    \n    // Update posY\n    this.posY += this.velY * deltaTime;\n    if (this.posY - this.radius < 0) { // If marble hits top border of maze\n      this.posY = this.radius;\n      this.velY = 0;\n    } else if (this.posY + this.radius > this.height) { // If marble hits bottom border of maze\n      this.posY = this.height - this.radius;\n      this.velY = 0;\n    }\n\n    // BOOKMARK\n\n    this.checkWallCollisions();\n    // this.checkBorderCollisions();\n    this.detectHole();\n\n    if (this.collision) {\n      // Correct position\n      this.posX += this.shiftX;\n      this.posY += this.shiftY;\n\n      // Correct velocity\n      if (\n        this.collision === \"top-left\" ||\n        this.collision === \"top-right\" ||\n        this.collision === \"bottom-left\" ||\n        this.collision === \"bottom-right\"\n      ) {\n        // this.velX *= (-1 * this.bounciness);\n        // this.velY *= (-1 * this.bounciness);\n        this.velX = 0;\n        this.velY = 0;\n      }\n      if (this.collision === \"top\" || this.collision === \"bottom\") {\n        // this.velX *= this.bounciness;\n        // this.velY *= (-1 * this.bounciness);\n        this.velY = 0;\n      }\n      if (this.collision === \"left\" || this.collision === \"right\") {\n        // this.velX *= (-1 * this.bounciness);\n        // this.velY *= this.bounciness;\n        this.velX = 0;\n      }\n\n    }\n    // debugger\n    \n    this.checkFinish();\n  }\n\n  tiltUp(deltaTime) {\n    this.tiltY -= deltaTime * this.tiltSensitivity;\n    if (this.tiltY < -1 * this.maxTiltY) this.tiltY = -1 * this.maxTiltY;\n  }\n\n  tiltDown(deltaTime) {\n    this.tiltY += deltaTime * this.tiltSensitivity;\n    if (this.tiltY > this.maxTiltY) this.tiltY = this.maxTiltY;\n  }\n\n  tiltLeft(deltaTime) {\n    this.tiltX -= deltaTime * this.tiltSensitivity;\n    if (this.tiltX < -1 * this.maxTiltX) this.tiltX = -1 * this.maxTiltX;\n  }\n\n  tiltRight(deltaTime) {\n    this.tiltX += deltaTime * this.tiltSensitivity;\n    if (this.tiltX > this.maxTiltX) this.tiltX = this.maxTiltX;\n  }\n}","export default class Hole {\n  constructor(id, posCellX, posCellY) {\n    this.cellSize = 36; // TODO - DRY me!\n    this.id = id;\n    this.posCellX = posCellX;\n    this.posCellY = posCellY;\n    this.posX = this.posCellX * this.cellSize;\n    this.posY = this.posCellY * this.cellSize;\n\n    this.radius = (this.cellSize * 0.75) / 2 + 16; // TODO - does this need to be adjusted?\n  }\n\n  draw(ctx) {\n    // // draw hole\n    // ctx.fillStyle = \"gray\";\n    // ctx.beginPath();\n    // ctx.arc(this.posX, this.posY, this.radius, 0, 2 * Math.PI);\n    // ctx.fill();\n\n    // draw shadow\n    const grd = ctx.createRadialGradient(this.posX, this.posY, 0, this.posX, this.posY, this.radius + 10)\n    grd.addColorStop(0, \"black\");\n    grd.addColorStop(1, \"gray\");\n    ctx.fillStyle = grd;\n    ctx.beginPath();\n    ctx.arc(this.posX, this.posY, this.radius, 0, 2 * Math.PI);\n    ctx.fill();\n    \n  }\n}","import Hole from \"./hole\";\n\nconst holes = [\n  new Hole(1, 15, 1),\n  new Hole(2, 5, 3),\n  new Hole(3, 9, 3),\n  new Hole(4, 17, 6),\n  new Hole(5, 11, 7),\n  new Hole(6, 1, 9),\n  new Hole(7, 13, 10),\n  new Hole(8, 3, 11),\n  new Hole(9, 9, 11),\n  new Hole(10, 21, 13),\n  new Hole(11, 5, 17),\n  new Hole(12, 7, 17)\n];\n\nexport default holes;","import './styles/index.scss';\nimport InputHandler from \"./scripts/input\";\nimport Game from \"./scripts/game\";\nimport Board from \"./scripts/board\";\nimport Marble from \"./scripts/marble\";\nimport walls from \"./scripts/walls\"; // select which walls file to import\nimport holes from \"./scripts/holes\"; // select which holes file to import\n\nlet canvas = document.getElementById(\"game-screen\");\nlet ctx = canvas.getContext(\"2d\");\n\nexport const CELL_SIZE = 36; // Game size multiplier\nexport const WALL_RADIUS = 2;\nexport const GAME_WIDTH = 22 * CELL_SIZE;\nexport const GAME_HEIGHT = 18 * CELL_SIZE;\n// const MARBLE_SIZE = 20;\nconst MARBLE_RADIUS = CELL_SIZE / 3;\n\nlet board = new Board(GAME_WIDTH, GAME_HEIGHT);\nlet marble = new Marble(MARBLE_RADIUS, GAME_WIDTH, GAME_HEIGHT, walls, holes);\nlet inputHandler = new InputHandler(marble);\nlet game = new Game(board, marble, walls, holes);\n\nlet lastTime = 0;\n\nfunction gameLoop(timestamp) {\n  let deltaTime = timestamp - lastTime;\n  lastTime = timestamp;\n\n  inputHandler.handleInput(deltaTime);\n  ctx.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT);\n  game.update(deltaTime);\n  game.draw(ctx);\n\n  requestAnimationFrame(gameLoop);\n}\n\nrequestAnimationFrame(gameLoop);\n"],"sourceRoot":""}